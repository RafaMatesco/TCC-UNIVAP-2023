using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Diagnostics.Eventing.Reader;
using System.Drawing;
using System.IO.Ports;
using System.Linq;
using System.Management;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace g1000
{
    public partial class Form1 : Form
    {

        string targetId = "USB\\VID_2771&PID_8776&MI_00";
        bool doingWork = false;
        string lastMessageCmb1 = "";
        string lastMessageCmb2 = "";
        public Form1()
        {
            InitializeComponent();
            InitializeTimer();
        }

        private void InitializeTimer()
        {
            Timer timer = new Timer();
            timer.Tick += new EventHandler(onTimerTick);
            timer.Interval = 2000;
            timer.Start();
        }

        private void onTimerTick(object sender, EventArgs e)
        {
            if (!doingWork)
            {
                getAvailablePorts(targetId);
                updatePorts();
            }
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            getAvailablePorts(targetId);
        }

        private void getAvailablePorts(string target)
        {
            string[] portNames = SerialPort.GetPortNames();
            comboBox1.Items.Clear();
            comboBox2.Items.Clear();

            comboBox1.Items.AddRange(portNames);
            comboBox2.Items.AddRange(portNames);

            string keyword = "MI_00\\";
            int c = 1;
            foreach(string portName in portNames)
            {
                int startIndex = GetPNPDeviceID(portName).IndexOf(keyword);

                if(startIndex >= 0)
                {
                    string result = GetPNPDeviceID(portName).Substring(0, startIndex + keyword.Length - 1);
                    if(result == target)
                    {
                        if(c == 1) {comboBox1.SelectedIndex = comboBox1.FindStringExact(portName);}
                        if (c == 2) {comboBox2.SelectedIndex = comboBox2.FindStringExact(portName);}
                        c++;
                    }
                }
            }
        }
            
        public async void updatePorts()
        {
            doingWork = true;
            this.BeginInvoke((Action)delegate ()
            {
                bool cmb1 = checkCmb(comboBox1);
                bool cmb2 = checkCmb(comboBox2);
                Debug.WriteLine($"{cmb1}:{cmb2}");
                if (checkCmb(comboBox1) == false && lastMessageCmb1 != "!contains")
                {
                    lastMessageCmb1 = "!contains";
                    MessageBox.Show("USB1 desconectado");
                }
                if (checkCmb(comboBox1) == true && lastMessageCmb1 != "contains")
                {
                    lastMessageCmb1 = "contains";
                    MessageBox.Show("USB1 conectado");
                }

                if (checkCmb(comboBox2) == false &&  lastMessageCmb2 != "!contains")
                {
                    lastMessageCmb2 = "!contains";
                    MessageBox.Show("USB2 desconectado");
                }
                if(checkCmb(comboBox2) == true && lastMessageCmb2 != "contains"){
                    lastMessageCmb2 = "contains";
                    MessageBox.Show("USB2 conectado");
                }
            });
            doingWork = false;
        }
        public bool checkCmb(ComboBox cmb)
        {
            String[] ports = SerialPort.GetPortNames();
            for (int i = 0;  i < ports.Length; i++)
            {   
                if (cmb.Items.Contains(ports[i])) { return true; }
            }
            return false;
        }

        static string GetPNPDeviceID(string portName)
        {
            using (ManagementObjectSearcher searcher = new ManagementObjectSearcher($"SELECT PNPDeviceID FROM Win32_SerialPort WHERE DeviceID = '{portName}'"))
            {
                ManagementObjectCollection collection = searcher.Get();
                foreach (ManagementObject obj in collection)
                {
                    return obj["PNPDeviceID"].ToString();
                }
            }
            return null;
        }
    }
}

public class Arquivo
{
    public string modelo { get; set; }
    public string porta1 { get; set; }
    public string porta2 { get; set; }
}
